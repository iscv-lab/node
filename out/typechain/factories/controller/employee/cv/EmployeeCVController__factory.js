import { ContractFactory, utils, Contract } from 'ethers';

/* Autogenerated file. Do not edit manually. */
const _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "listEmployeeAddress",
                type: "address",
            },
            {
                internalType: "address",
                name: "listEmployeeCVAddress",
                type: "address",
            },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "previousOwner",
                type: "address",
            },
            {
                indexed: true,
                internalType: "address",
                name: "newOwner",
                type: "address",
            },
        ],
        name: "OwnershipTransferred",
        type: "event",
    },
    {
        inputs: [],
        name: "_checkExistEmployeeAccount",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "employeeId",
                type: "uint256",
            },
            {
                internalType: "string",
                name: "source",
                type: "string",
            },
        ],
        name: "addCV",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "destroy",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "getCVs",
        outputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "id",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "employeeId",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "time",
                        type: "uint256",
                    },
                    {
                        internalType: "string",
                        name: "source",
                        type: "string",
                    },
                ],
                internalType: "struct EmployeeCV[]",
                name: "",
                type: "tuple[]",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "owner",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "newOwner",
                type: "address",
            },
        ],
        name: "transferOwnership",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
const _bytecode = "0x60806040523480156200001157600080fd5b50604051620014e6380380620014e683398181016040528101906200003791906200016f565b8082336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620001b6565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000137826200010a565b9050919050565b62000149816200012a565b81146200015557600080fd5b50565b60008151905062000169816200013e565b92915050565b6000806040838503121562000189576200018862000105565b5b6000620001998582860162000158565b9250506020620001ac8582860162000158565b9150509250929050565b61132080620001c66000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630201a64f1461006757806383197ef0146100855780638da5cb5b1461008f578063ec40a59b146100ad578063f2fde38b146100cb578063ffc1e78a146100e7575b600080fd5b61006f610103565b60405161007c9190610893565b60405180910390f35b61008d610185565b005b6100976101a6565b6040516100a491906108f6565b60405180910390f35b6100b56101cf565b6040516100c2919061092c565b60405180910390f35b6100e560048036038101906100e09190610987565b6102aa565b005b61010160048036038101906100fc9190610b15565b61032d565b005b606061010d61045b565b73ffffffffffffffffffffffffffffffffffffffff166353ed51436040518163ffffffff1660e01b8152600401600060405180830381865afa158015610157573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906101809190610d7a565b905090565b61018d610485565b3073ffffffffffffffffffffffffffffffffffffffff16ff5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166368938870336040518263ffffffff1660e01b815260040161022d91906108f6565b602060405180830381865afa15801561024a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026e9190610dc3565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81036102a15760009150506102a7565b60019150505b90565b6102b2610485565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610321576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031890610e73565b60405180910390fd5b61032a816104fc565b50565b816103366101cf565b610375576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036c90610f05565b60405180910390fd5b61037e816105c0565b6103bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b490610f97565b60405180910390fd5b60006040518060800160405280858152602001600081526020014281526020018481525090506103eb61045b565b73ffffffffffffffffffffffffffffffffffffffff1663f4440976826040518263ffffffff1660e01b8152600401610423919061101a565b600060405180830381600087803b15801561043d57600080fd5b505af1158015610451573d6000803e3d6000fd5b5050505050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff166104a46101a6565b73ffffffffffffffffffffffffffffffffffffffff16146104fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f190611088565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e0886f90846040518263ffffffff1660e01b815260040161061e91906110b7565b600060405180830381865afa15801561063b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061066491906112a1565b905061067481604001513361067c565b915050919050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036106ba57600190506106bf565b600090505b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b610704816106f1565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610744578082015181840152602081019050610729565b60008484015250505050565b6000601f19601f8301169050919050565b600061076c8261070a565b6107768185610715565b9350610786818560208601610726565b61078f81610750565b840191505092915050565b60006080830160008301516107b260008601826106fb565b5060208301516107c560208601826106fb565b5060408301516107d860408601826106fb565b50606083015184820360608601526107f08282610761565b9150508091505092915050565b6000610809838361079a565b905092915050565b6000602082019050919050565b6000610829826106c5565b61083381856106d0565b935083602082028501610845856106e1565b8060005b85811015610881578484038952815161086285826107fd565b945061086d83610811565b925060208a01995050600181019050610849565b50829750879550505050505092915050565b600060208201905081810360008301526108ad818461081e565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108e0826108b5565b9050919050565b6108f0816108d5565b82525050565b600060208201905061090b60008301846108e7565b92915050565b60008115159050919050565b61092681610911565b82525050565b6000602082019050610941600083018461091d565b92915050565b6000604051905090565b600080fd5b600080fd5b610964816108d5565b811461096f57600080fd5b50565b6000813590506109818161095b565b92915050565b60006020828403121561099d5761099c610951565b5b60006109ab84828501610972565b91505092915050565b6109bd816106f1565b81146109c857600080fd5b50565b6000813590506109da816109b4565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610a2282610750565b810181811067ffffffffffffffff82111715610a4157610a406109ea565b5b80604052505050565b6000610a54610947565b9050610a608282610a19565b919050565b600067ffffffffffffffff821115610a8057610a7f6109ea565b5b610a8982610750565b9050602081019050919050565b82818337600083830152505050565b6000610ab8610ab384610a65565b610a4a565b905082815260208101848484011115610ad457610ad36109e5565b5b610adf848285610a96565b509392505050565b600082601f830112610afc57610afb6109e0565b5b8135610b0c848260208601610aa5565b91505092915050565b60008060408385031215610b2c57610b2b610951565b5b6000610b3a858286016109cb565b925050602083013567ffffffffffffffff811115610b5b57610b5a610956565b5b610b6785828601610ae7565b9150509250929050565b600067ffffffffffffffff821115610b8c57610b8b6109ea565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b600081519050610bbb816109b4565b92915050565b6000610bd4610bcf84610a65565b610a4a565b905082815260208101848484011115610bf057610bef6109e5565b5b610bfb848285610726565b509392505050565b600082601f830112610c1857610c176109e0565b5b8151610c28848260208601610bc1565b91505092915050565b600060808284031215610c4757610c46610ba2565b5b610c516080610a4a565b90506000610c6184828501610bac565b6000830152506020610c7584828501610bac565b6020830152506040610c8984828501610bac565b604083015250606082015167ffffffffffffffff811115610cad57610cac610ba7565b5b610cb984828501610c03565b60608301525092915050565b6000610cd8610cd384610b71565b610a4a565b90508083825260208201905060208402830185811115610cfb57610cfa610b9d565b5b835b81811015610d4257805167ffffffffffffffff811115610d2057610d1f6109e0565b5b808601610d2d8982610c31565b85526020850194505050602081019050610cfd565b5050509392505050565b600082601f830112610d6157610d606109e0565b5b8151610d71848260208601610cc5565b91505092915050565b600060208284031215610d9057610d8f610951565b5b600082015167ffffffffffffffff811115610dae57610dad610956565b5b610dba84828501610d4c565b91505092915050565b600060208284031215610dd957610dd8610951565b5b6000610de784828501610bac565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610e5d602683610df0565b9150610e6882610e01565b604082019050919050565b60006020820190508181036000830152610e8c81610e50565b9050919050565b7f4c697374456d706c6f796565437572736f723a206e6f7420657869737420616360008201527f636f756e74000000000000000000000000000000000000000000000000000000602082015250565b6000610eef602583610df0565b9150610efa82610e93565b604082019050919050565b60006020820190508181036000830152610f1e81610ee2565b9050919050565b7f4c697374456d706c6f796565437572736f723a206964206973206e6f7420626560008201527f6c6f6e6720746f20616464726573730000000000000000000000000000000000602082015250565b6000610f81602f83610df0565b9150610f8c82610f25565b604082019050919050565b60006020820190508181036000830152610fb081610f74565b9050919050565b6000608083016000830151610fcf60008601826106fb565b506020830151610fe260208601826106fb565b506040830151610ff560408601826106fb565b506060830151848203606086015261100d8282610761565b9150508091505092915050565b600060208201905081810360008301526110348184610fb7565b905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611072602083610df0565b915061107d8261103c565b602082019050919050565b600060208201905081810360008301526110a181611065565b9050919050565b6110b1816106f1565b82525050565b60006020820190506110cc60008301846110a8565b92915050565b6000815190506110e18161095b565b92915050565b600061014082840312156110fe576110fd610ba2565b5b611109610140610a4a565b9050600061111984828501610bac565b600083015250602061112d84828501610bac565b6020830152506040611141848285016110d2565b604083015250606082015167ffffffffffffffff81111561116557611164610ba7565b5b61117184828501610c03565b606083015250608082015167ffffffffffffffff81111561119557611194610ba7565b5b6111a184828501610c03565b60808301525060a082015167ffffffffffffffff8111156111c5576111c4610ba7565b5b6111d184828501610c03565b60a08301525060c082015167ffffffffffffffff8111156111f5576111f4610ba7565b5b61120184828501610c03565b60c08301525060e082015167ffffffffffffffff81111561122557611224610ba7565b5b61123184828501610c03565b60e08301525061010082015167ffffffffffffffff81111561125657611255610ba7565b5b61126284828501610c03565b6101008301525061012082015167ffffffffffffffff81111561128857611287610ba7565b5b61129484828501610c03565b6101208301525092915050565b6000602082840312156112b7576112b6610951565b5b600082015167ffffffffffffffff8111156112d5576112d4610956565b5b6112e1848285016110e7565b9150509291505056fea2646970667358221220d1304c20b3a6c9d8cc89af4f1739ddafaa76382b13283c3fbd07b35cee4be3f664736f6c63430008110033";
const isSuperArgs = (xs) => xs.length > 1;
class EmployeeCVController__factory extends ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(listEmployeeAddress, listEmployeeCVAddress, overrides) {
        return super.deploy(listEmployeeAddress, listEmployeeCVAddress, overrides || {});
    }
    getDeployTransaction(listEmployeeAddress, listEmployeeCVAddress, overrides) {
        return super.getDeployTransaction(listEmployeeAddress, listEmployeeCVAddress, overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static bytecode = _bytecode;
    static abi = _abi;
    static createInterface() {
        return new utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new Contract(address, _abi, signerOrProvider);
    }
}

export { EmployeeCVController__factory };
